# This is a basic workflow to help you get started with Actions

name: Convert 

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:
permissions: write-all
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      TOKEN: GITHUB_TOKEN${{ secrets.GITHUB_TOKEN }}
    
    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Convert CERT List 
        env:
          POWERSHELL_TELEMETRY_OPTOUT: 1
        id: convert_list
        shell: pwsh
        run: |
         Invoke-WebRequest -Uri "https://hole.cert.pl/domains/domains_adblock.txt" -OutFile .\domains_adblock.txt
         Set-Content -Path .\domains_adblock_fixed.txt -Value (Get-Content .\domains_adblock.txt).Replace("^`$all","^") -Force
         $version = (Get-Content .\domains_adblock.txt)[1] -replace ".*version:\s*([^\s]+).*",'$1'
         Write-Output "version=$($version)" >> $ENV:GITHUB_OUTPUT
      - name: Push new List
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add domains_adblock_fixed.txt
          git commit -a -m "Add changes version ${{ steps.convert_list.outputs.version }}"
          git tag -a "v.${{ steps.convert_list.outputs.version }}" -m "Add changes version ${{ steps.convert_list.outputs.version }}"
          # git push --atomic origin main v.${{ steps.convert_list.outputs.version }}
          git push --follow-tags
      - name: Clean tags
        if: always()
        run: |
          git fetch origin --prune --tags
          for tag in $(git for-each-ref --format='%(refname:short)' refs/tags); do
            tag_date=$(git show -s --format=%ci $tag)
            tag_timestamp=$(date -d "$tag_date" +%s)
            week_ago=$(date -d"7 days ago" +%s)
            if [[ $tag_timestamp -lt $week_ago ]]; then
              git tag -d $tag
              git push origin :$tag
            fi
          done
